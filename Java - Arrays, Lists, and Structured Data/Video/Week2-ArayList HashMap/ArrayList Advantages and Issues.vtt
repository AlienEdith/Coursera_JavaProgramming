WEBVTT

1
00:00:03.099 --> 00:00:03.739
Hi.

2
00:00:03.739 --> 00:00:07.570
You've seen ArrayList at work and
how useful they are.

3
00:00:07.570 --> 00:00:09.570
Arrays are extremely useful too.

4
00:00:09.570 --> 00:00:13.050
So we're going to go through
a quick walkthrough of code to show

5
00:00:13.050 --> 00:00:15.520
where arrays don't work so well.

6
00:00:15.520 --> 00:00:20.140
Creating an array is easier in terms
of syntax than creating an ArrayList.

7
00:00:20.140 --> 00:00:22.800
Far fewer characters to type, for example.

8
00:00:22.800 --> 00:00:27.610
It's much easier to access values in an
array since a[k] can work to either read

9
00:00:27.610 --> 00:00:32.530
from an array location or write to
the array location given the index k.

10
00:00:32.530 --> 00:00:37.280
In contrast with ArrayList you use
.get and .set for reading and writing,

11
00:00:37.280 --> 00:00:38.730
respectively.

12
00:00:38.730 --> 00:00:44.520
With int values, arrays often have more
benefits, in some ways, than ArrayList do.

13
00:00:44.520 --> 00:00:48.130
Although most conversions between int and
integer happen automatically,

14
00:00:48.130 --> 00:00:51.950
occasionally these conversations can lead
to hard-to-find bugs if you don't have

15
00:00:51.950 --> 00:00:55.930
a thorough understanding of how the int
and integer conversation works.

16
00:00:56.950 --> 00:01:00.920
It's easy to increment the value
of an array, given the index.

17
00:01:00.920 --> 00:01:04.405
However, in an ArrayList,
you have to call .get and

18
00:01:04.405 --> 00:01:10.800
.set since the code to simply increment
the result returned by .get does not work.

19
00:01:10.800 --> 00:01:15.610
However, arrays don't grow, and
that's a really large concern.

20
00:01:15.610 --> 00:01:17.200
Let's write some code.

21
00:01:17.200 --> 00:01:20.410
Now we want to find a number
of unique words in a file, but

22
00:01:20.410 --> 00:01:24.500
we want to use or
at least try to use an array.

23
00:01:25.560 --> 00:01:26.620
So that's what we're gonna do here.

24
00:01:26.620 --> 00:01:31.890
I've started this program,
the class is called WordsWithArrays, and

25
00:01:31.890 --> 00:01:36.810
the first problem we run in to is we want
to read in all the words from a file,

26
00:01:36.810 --> 00:01:39.940
but we don't know how many
words there are in a file.

27
00:01:39.940 --> 00:01:42.240
So we don't know how
big to make our array.

28
00:01:42.240 --> 00:01:43.960
So we can't really use an array for that.

29
00:01:43.960 --> 00:01:47.160
So we'll use a storage resource for
that part of the program.

30
00:01:47.160 --> 00:01:48.190
So I've already started here.

31
00:01:48.190 --> 00:01:50.930
We've got myWords,
which is a storage resource.

32
00:01:52.230 --> 00:01:55.690
We have created this storage
resource in our constructor.

33
00:01:55.690 --> 00:02:01.090
And then we have read words, which is
gonna read all the words from the file and

34
00:02:01.090 --> 00:02:04.830
put it into our storage resource, myWords.

35
00:02:04.830 --> 00:02:07.517
Node is also going to add
them in as lower case, so

36
00:02:07.517 --> 00:02:09.690
all of the words have been lower cased.

37
00:02:11.370 --> 00:02:17.020
We have a method called contains,
where we're going to pass in

38
00:02:17.020 --> 00:02:23.550
an array of type string and a word and we
want to know, is that word in our array?

39
00:02:25.185 --> 00:02:31.740
So what contains is gonna do is it's
going to look through the array and see

40
00:02:31.740 --> 00:02:36.520
if the word that we're passing in matches
anything, and if it does, it returns true.

41
00:02:37.790 --> 00:02:40.490
If we go through the whole thing and
we don't see it anywhere,

42
00:02:40.490 --> 00:02:41.940
we're gonna return false.

43
00:02:45.190 --> 00:02:51.495
Now, we have number of unique words,
and the first thing we've done

44
00:02:51.495 --> 00:02:57.930
is we are going to create an array here
to store all the words that are unique.

45
00:03:00.460 --> 00:03:02.510
So you can see that
I've started that here.

46
00:03:02.510 --> 00:03:05.850
I've gone ahead and
putting words as an array of type String.

47
00:03:05.850 --> 00:03:08.980
I have to create a new one, so I do that.

48
00:03:08.980 --> 00:03:13.720
And then I get to the part about the size,
and I don't know how big to make it.

49
00:03:14.830 --> 00:03:17.760
So I don't know how many
unique words they're gonna be.

50
00:03:17.760 --> 00:03:22.110
So the only thing I can do is just
make it as big as my storage resource.

51
00:03:22.110 --> 00:03:24.700
So I made the size, myWords.size.

52
00:03:24.700 --> 00:03:27.160
That's the only safe thing to do
cuz all the words could be unique.

53
00:03:30.170 --> 00:03:35.580
Now we're gonna iterate over myWords,
and we're gonna check and see for

54
00:03:35.580 --> 00:03:42.570
each one is it in words,
which is gonna be just the unique words.

55
00:03:42.570 --> 00:03:44.220
So, is it already in there?

56
00:03:44.220 --> 00:03:45.400
If it's not in there,

57
00:03:45.400 --> 00:03:49.210
we found a new unique word and
we're gonna put it in there.

58
00:03:49.210 --> 00:03:53.190
So, you can see here on
this line we add it in.

59
00:03:53.190 --> 00:03:57.540
And then we're also keeping track
of how many unique words we have

60
00:03:57.540 --> 00:04:01.190
because this method is gonna
return the number of unique words.

61
00:04:01.190 --> 00:04:03.580
And so
every time we find a new unique word,

62
00:04:03.580 --> 00:04:05.800
we're going to add one to that count.

63
00:04:08.130 --> 00:04:10.950
The next thing we have is
we have a tester method so

64
00:04:10.950 --> 00:04:13.570
we can test this out, right down here.

65
00:04:13.570 --> 00:04:15.450
So we're just gonna call it and
test it out.

66
00:04:15.450 --> 00:04:16.680
So let's compile this.

67
00:04:16.680 --> 00:04:18.000
It's already compiled, it looks like.

68
00:04:20.150 --> 00:04:21.320
And so we'll go ahead and run it.

69
00:04:24.130 --> 00:04:29.670
We have to create our object and
then we'll call the tester class.

70
00:04:31.250 --> 00:04:35.820
And we have to pick up a file, so
I'm gonna pick confusius.text.

71
00:04:35.820 --> 00:04:37.650
Oh dear, we got an error.

72
00:04:37.650 --> 00:04:42.840
So it says down here we got
a NullPointerException.

73
00:04:42.840 --> 00:04:47.670
Also over here this, is our output here.

74
00:04:47.670 --> 00:04:51.240
You can see that it did read in
all the words from the file.

75
00:04:51.240 --> 00:04:54.020
It says there was 34,582 words read in,
but

76
00:04:54.020 --> 00:04:59.862
you can see also it got a PointerException
and you can see where that exception is.

77
00:04:59.862 --> 00:05:05.198
It says in the tester, on line 45,
and then in number of unique words,

78
00:05:05.198 --> 00:05:09.316
there's a line for that and
then contains on line 23.

79
00:05:09.316 --> 00:05:12.260
And so that top one is
probably where the error is.

80
00:05:12.260 --> 00:05:15.700
And if we click on that,
it goes to where this error's highlighted

81
00:05:15.700 --> 00:05:20.199
here and
you can see our errors it contains.

82
00:05:21.310 --> 00:05:22.530
So what is the problem?

83
00:05:22.530 --> 00:05:28.170
Well the problem is we're

84
00:05:28.170 --> 00:05:32.640
using this array to put all the unique
words but we don't have any in there yet.

85
00:05:33.680 --> 00:05:38.090
And then we're actually iterating over
the whole thing, which is all empty.

86
00:05:38.090 --> 00:05:39.640
It's initialized to null.

87
00:05:39.640 --> 00:05:43.430
And so we're checking,
does a value that's null equal a word?

88
00:05:43.430 --> 00:05:44.585
And that's why it crashed.

89
00:05:44.585 --> 00:05:47.830
Cuz you can't compare null to a string.

90
00:05:47.830 --> 00:05:52.820
So, we need to fix this.

91
00:05:52.820 --> 00:05:56.024
So, what we really wanna do is we wanna
keep track of how many unique words

92
00:05:56.024 --> 00:05:56.976
we have in there.

93
00:05:56.976 --> 00:05:59.560
Cuz we just wanna check the unique
words that are actually

94
00:05:59.560 --> 00:06:01.710
in there that we've actually put in there.

95
00:06:01.710 --> 00:06:06.240
And so what we'll have to do in order to
fix that is first of all, we'll have to

96
00:06:06.240 --> 00:06:10.688
add another parameter so we know how
many words we've actually put in there.

97
00:06:10.688 --> 00:06:16.050
So I'm gona add a parameter
here called number and

98
00:06:16.050 --> 00:06:17.798
we actually have to give it a type.

99
00:06:17.798 --> 00:06:20.519
So it's gonna be an integer, int number.

100
00:06:20.519 --> 00:06:25.124
And then when we iterate, we just wanna
iterate over the words we put in there, so

101
00:06:25.124 --> 00:06:27.044
we wanna replace list.length.

102
00:06:27.044 --> 00:06:30.772
Instead of looking at the whole,
gigantic array,

103
00:06:30.772 --> 00:06:35.030
we wanna look at just the ones
that are already in there.

104
00:06:35.030 --> 00:06:37.140
So number tells us how many
are currently in there.

105
00:06:39.670 --> 00:06:43.917
Now we also have to fix where we
call contains, which is down here.

106
00:06:46.505 --> 00:06:49.209
And we have to put a value here.

107
00:06:49.209 --> 00:06:54.140
Remember, we're keeping track of how
many words we've put in there that

108
00:06:54.140 --> 00:06:55.800
are unique words.

109
00:06:55.800 --> 00:06:57.680
That is the variable numStored.

110
00:06:57.680 --> 00:07:00.920
So we'll pass numStored here.

111
00:07:02.310 --> 00:07:03.850
Let's compile that and see if that works.

112
00:07:05.100 --> 00:07:06.360
We got no syntax errors.

113
00:07:06.360 --> 00:07:08.046
Let's try and run it.

114
00:07:20.110 --> 00:07:21.792
And it works.

115
00:07:21.792 --> 00:07:25.374
So you can see here we've had a lot
of trouble trying to use an array.

116
00:07:25.374 --> 00:07:30.918
This problem really should use
an ArrayList because here, what's happened

117
00:07:30.918 --> 00:07:37.502
is this is a file that has 34,000 words
of which only the unique words are 6,558.

118
00:07:37.502 --> 00:07:42.032
So that means the array we're
using is a size 34,000.

119
00:07:42.032 --> 00:07:47.314
But there's only 6,500 unique words.

120
00:07:47.314 --> 00:07:49.159
So we have a lot of extra space.

121
00:07:49.159 --> 00:07:54.180
That's another reason why an ArrayList
would be better for this problem.

122
00:07:54.180 --> 00:07:55.160
All right.
Happy coding.