WEBVTT

1
00:00:03.087 --> 00:00:04.460
Welcome back.

2
00:00:04.460 --> 00:00:07.500
In this lesson,
you'll learn about a new class.

3
00:00:07.500 --> 00:00:10.740
A very important part of Java that
combines essential features of

4
00:00:10.740 --> 00:00:13.550
the storage resource class, and an array.

5
00:00:13.550 --> 00:00:14.780
In fact, this new class,

6
00:00:14.780 --> 00:00:19.730
the ArrayList is the foundation of how
the stored resource class is implemented.

7
00:00:19.730 --> 00:00:21.330
To motivate the problem,

8
00:00:21.330 --> 00:00:26.390
think about counting how many different
words there are in a file or a webpage.

9
00:00:26.390 --> 00:00:30.840
But the same problem is encountered in
finding the number of unique IP addresses

10
00:00:30.840 --> 00:00:36.460
to visit a website in a day, a key part of
charging a company for online advertising.

11
00:00:36.460 --> 00:00:41.790
You've seen how to count the number of
each type of nucleotide in digitized DNA.

12
00:00:41.790 --> 00:00:44.520
And you used an array to count
the number of occurrences

13
00:00:44.520 --> 00:00:48.990
of each alphabetic character
in cracking a Caesar cipher.

14
00:00:48.990 --> 00:00:54.050
These are first steps in counting how
many times each word occurs in a file?

15
00:00:54.050 --> 00:00:58.700
How many times the occurs or
cat or the word albatross?

16
00:00:58.700 --> 00:01:02.730
One important part of solving that problem
is finding how many different words there

17
00:01:02.730 --> 00:01:07.100
are, so that the counts as one word,
rather than 573,

18
00:01:07.100 --> 00:01:10.370
if it occurs that many times in document.

19
00:01:10.370 --> 00:01:14.880
If the image below In the image below,
there are only three different digits,

20
00:01:14.880 --> 00:01:18.790
four, six, and seven, even though
there are hundreds of digits shown.

21
00:01:18.790 --> 00:01:22.500
We'll look at StorageResource as
a way of solving this problem.

22
00:01:22.500 --> 00:01:26.260
First, we'll count the total number
of words in a file or web page.

23
00:01:26.260 --> 00:01:29.150
The class StorageResource makes this easy.

24
00:01:29.150 --> 00:01:30.560
To count the words in a file or

25
00:01:30.560 --> 00:01:36.090
web page you'll iterate over either
a file resource or URL resource.

26
00:01:36.090 --> 00:01:39.100
As you can see in the highlighted code,
iterating over a file or

27
00:01:39.100 --> 00:01:42.990
webpage using these resources
uses nearly identical code.

28
00:01:42.990 --> 00:01:46.310
And here you see that simply
calling the dot add method

29
00:01:46.310 --> 00:01:50.700
adds each word to the StorageResource
instance variable my words.

30
00:01:50.700 --> 00:01:54.398
When done, the .size method will
provide the total number of words read.

31
00:01:54.398 --> 00:01:59.490
The method .getCount returns
this number when called again,

32
00:01:59.490 --> 00:02:04.650
using the instance variable myWords, which
was initialized in the constructor and

33
00:02:04.650 --> 00:02:07.580
added to in the method readWords.

34
00:02:07.580 --> 00:02:10.790
As you'll see, it's easy to use
StorageResources to count the number of

35
00:02:10.790 --> 00:02:12.050
different words.

36
00:02:12.050 --> 00:02:13.970
Not simply the total number of words.

37
00:02:15.030 --> 00:02:18.870
This code can be easily modified
to find the number of unique or

38
00:02:18.870 --> 00:02:21.080
different words in a file or webpage.

39
00:02:22.130 --> 00:02:25.910
The field, myWords,
whose type is storage resource,

40
00:02:25.910 --> 00:02:30.109
can store all the words as you've just
seen and as shown in the code here.

41
00:02:31.110 --> 00:02:35.090
The .add method adds every
string read to myWords.

42
00:02:35.090 --> 00:02:38.570
But it's simple to guard
the call to .add with code that

43
00:02:38.570 --> 00:02:42.590
only calls .add when the word is seen for
the first time.

44
00:02:42.590 --> 00:02:45.430
When it hasn't been stored in myWords yet.

45
00:02:45.430 --> 00:02:49.270
The .contains method
returns a Boolean value.

46
00:02:49.270 --> 00:02:54.490
And the code here, this value is used to
ensure that the .add method is called only

47
00:02:54.490 --> 00:02:58.360
when the storage research object
my words does not contain a word.

48
00:02:59.630 --> 00:03:03.440
However, the storage research
class is not a good choice for

49
00:03:03.440 --> 00:03:05.390
choosing elements at random.

50
00:03:05.390 --> 00:03:08.620
The key part of the story telling
code glad lids we're working on.

51
00:03:09.840 --> 00:03:11.280
To choose an element at random,

52
00:03:11.280 --> 00:03:15.890
we must use the iterable interface
that StorageResource provides.

53
00:03:15.890 --> 00:03:18.760
This means we use a loop
to access every element

54
00:03:18.760 --> 00:03:21.420
in the StorageResource object myWords.

55
00:03:21.420 --> 00:03:25.710
In the loop here, we'd really like to
iterate as many times as the values stored

56
00:03:25.710 --> 00:03:31.530
in variable choice, because we want to use
a random element of the StorageResource.

57
00:03:31.530 --> 00:03:37.450
The code here returns a random string
when the value of counter reaches zero.

58
00:03:37.450 --> 00:03:41.180
As you can see in the code,
the value of choice must reach zero

59
00:03:41.180 --> 00:03:44.660
because it starts at a value less
than the size of my words and

60
00:03:44.660 --> 00:03:47.740
it's decremented by one
each time through the loop.

61
00:03:47.740 --> 00:03:52.600
However, the Java compiler analyzes
the loop with an IF statement, and

62
00:03:52.600 --> 00:03:54.410
doesn't know that it's possible.

63
00:03:54.410 --> 00:03:56.392
The if statement must
be true at some point.

64
00:03:56.392 --> 00:04:01.520
The compiler indicates it's an error
to be missing a return statement,

65
00:04:01.520 --> 00:04:04.980
after the loop even though that
part of the code is never reached.

66
00:04:04.980 --> 00:04:08.820
It would be simpler to code, and much,

67
00:04:08.820 --> 00:04:14.600
much faster to use a string array to get a
random element, as shown in the code here.

68
00:04:14.600 --> 00:04:19.460
We simply generate a random manager and
use that as an index into the array.

69
00:04:20.600 --> 00:04:25.280
Unfortunately, we must specify the
capacity of an array when we declare it.

70
00:04:25.280 --> 00:04:28.450
Arrays do not grow in the way that
a storage resource object grows.

71
00:04:29.910 --> 00:04:32.740
The class array list
provides a solution and

72
00:04:32.740 --> 00:04:36.490
combines the best feature of
storage resource and arrays.

73
00:04:36.490 --> 00:04:38.530
The class ArrayList is from
the java.util package.

74
00:04:38.530 --> 00:04:42.100
The same package that contains
the random class we've used.

75
00:04:43.430 --> 00:04:48.160
An ArrayList expands its capacity as
needed when it's .add method is called,

76
00:04:48.160 --> 00:04:50.650
just like a StorageResource object.

77
00:04:50.650 --> 00:04:54.630
An ArrayList also provides access via
indexing, so that the zeroth or 101st

78
00:04:54.630 --> 00:04:59.850
element can be accessed without iterating
over all elements just like an array.

79
00:05:01.120 --> 00:05:04.490
The StorageResource class
uses an ArrayList internally.

80
00:05:04.490 --> 00:05:08.560
In fact, it's simply a little
easier to use than an ArrayList but

81
00:05:08.560 --> 00:05:12.190
as you become more experience, you're
now able to use ArrayList which stores

82
00:05:12.190 --> 00:05:14.730
any kind of object, not just strings.

83
00:05:14.730 --> 00:05:17.930
The basic syntax of the ArrayList
class is shown here.

84
00:05:17.930 --> 00:05:20.450
But you'll see it used in a coding
example in the next lesson.

85
00:05:21.920 --> 00:05:25.490
To declare an ArrayList variable,
you must include the type of object

86
00:05:25.490 --> 00:05:28.760
stored in the ArrayList using
the angle brackets as shown here.

87
00:05:29.810 --> 00:05:33.830
Like any object,
creating one requires calling new and

88
00:05:33.830 --> 00:05:36.990
providing the class name as
a constructor to create and

89
00:05:36.990 --> 00:05:41.310
initialize the object that's shown here,
and assigned to the variable words.

90
00:05:42.570 --> 00:05:47.360
Then you can call the .add method to
add strings to the ArrayList object.

91
00:05:47.360 --> 00:05:52.530
And you can call the .get method to
access a particular element via indexing.

92
00:05:52.530 --> 00:05:55.510
Just like the bracket
notation used with an array.

93
00:05:55.510 --> 00:05:58.993
But with an ArrayList,
you'll use the .get method.

94
00:05:58.993 --> 00:06:01.390
The .set method can change or

95
00:06:01.390 --> 00:06:04.520
set the element at a particular
index in the array list object.

96
00:06:05.580 --> 00:06:09.760
Here the first or zeroth indexed
element is set to the string goodbye.

97
00:06:11.100 --> 00:06:15.320
We'll see more examples as we go through
a coding example with ArrayList.

98
00:06:15.320 --> 00:06:19.560
The ArrayList class is more
powerful than StorageResource and

99
00:06:19.560 --> 00:06:21.000
can sort any kind of object.

100
00:06:21.000 --> 00:06:25.800
It will be an essential class in
solving many problems with Java.

101
00:06:25.800 --> 00:06:26.300
Thank you.