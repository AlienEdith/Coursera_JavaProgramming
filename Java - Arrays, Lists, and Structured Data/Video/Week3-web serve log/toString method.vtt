WEBVTT

1
00:00:03.483 --> 00:00:06.086
Hi.
So today what we're gonna do is we have

2
00:00:06.086 --> 00:00:09.970
this LogEntry class, and
I want to show you toString.

3
00:00:09.970 --> 00:00:14.860
So the LogEntry class, notice it has these
five fields here, ipAddress and so on.

4
00:00:14.860 --> 00:00:19.600
We've got our constructor and
we've all these methods.

5
00:00:19.600 --> 00:00:21.490
And I've written toString down here.

6
00:00:21.490 --> 00:00:27.130
And you can see that it returns those
five fields as one big long string and

7
00:00:27.130 --> 00:00:30.830
what I've done is I've
got a tester over here,

8
00:00:30.830 --> 00:00:34.367
that is creating two log entries le and
le2.

9
00:00:34.367 --> 00:00:38.950
And I just kinda made up some information
for each of them, so they're different.

10
00:00:38.950 --> 00:00:42.300
And then, it prints out the actual object.

11
00:00:42.300 --> 00:00:44.373
It prints out le and it prints out le2.

12
00:00:44.373 --> 00:00:47.119
So, let's run it and
see what happens when we do this.

13
00:00:48.280 --> 00:00:49.970
So I'm gonna come over here.

14
00:00:49.970 --> 00:00:51.850
Notice I need to compile both of these.

15
00:00:51.850 --> 00:00:52.727
I'm gonna compile a tester.

16
00:00:52.727 --> 00:00:56.917
And it actually compiles both of them for
me.

17
00:00:56.917 --> 00:00:58.646
I'm gonna now run tester.

18
00:01:05.122 --> 00:01:08.272
Test log entry, and
there you can see it printed out,

19
00:01:08.272 --> 00:01:11.986
the five pieces of information for
each log entry, very nice.

20
00:01:17.194 --> 00:01:23.159
So, now what I'm gonna do is,
I'm gonna come back to my class and

21
00:01:23.159 --> 00:01:28.801
instead of calling it toString,
I'm gonna change the name,

22
00:01:28.801 --> 00:01:32.506
I'm gonna call it, [NOISE] getLogInfo.

23
00:01:32.506 --> 00:01:37.231
[NOISE] And compile it again and run it.

24
00:01:37.231 --> 00:01:45.765
[NOISE] Now let's see what happens.

25
00:01:48.012 --> 00:01:53.070
So I've got my object, and
now I'm running test LogEntry.

26
00:01:53.070 --> 00:01:59.020
Oh, so I ran it, but
it just printed out something else.

27
00:01:59.020 --> 00:01:59.920
Let's see what it printed.

28
00:01:59.920 --> 00:02:03.570
It actually printed out the memory
location of each of those objects.

29
00:02:03.570 --> 00:02:06.440
So let's go back to test our tester.

30
00:02:06.440 --> 00:02:13.030
Here, and
you can see when I print out an object le.

31
00:02:13.030 --> 00:02:14.250
It doesn't know how to print it out.

32
00:02:15.610 --> 00:02:17.840
So, it just prints out
its address location.

33
00:02:19.018 --> 00:02:23.320
It's not calling the method we wrote,

34
00:02:23.320 --> 00:02:27.030
which is called,
let's see here, right here.

35
00:02:27.030 --> 00:02:32.230
We called it, get logged info, it's not
calling that because we didn't specify it.

36
00:02:32.230 --> 00:02:37.960
So let's come back over here and
we'll specify to print out

37
00:02:37.960 --> 00:02:46.767
a log entry with that method, we need
to actually write, LogEntry.getLogInfo,

38
00:02:46.767 --> 00:02:50.490
and I'll just do that for
the first object, and

39
00:02:50.490 --> 00:02:54.200
I'll leave the other one le2 like that,
and let's see what happens.

40
00:02:54.200 --> 00:02:57.550
We'll compile it, and
we'll come over here and run tester,

41
00:03:04.020 --> 00:03:09.390
and so, you can see, for
the first object I called get log info,

42
00:03:09.390 --> 00:03:13.217
and it prints the five
pieces of information.

43
00:03:13.217 --> 00:03:16.210
But, for the second one,
I just said print the object, and so

44
00:03:16.210 --> 00:03:18.230
it just shows the memory location of it.

45
00:03:18.230 --> 00:03:18.771
So what's going on here?

46
00:03:21.970 --> 00:03:26.965
It turns out that every class has

47
00:03:26.965 --> 00:03:32.640
a two string method by default.

48
00:03:32.640 --> 00:03:35.990
But it only knows to print out
the memory address of an object,

49
00:03:35.990 --> 00:03:38.870
unless you actually specify
a two string class.

50
00:03:38.870 --> 00:03:40.361
So I'm gonna change this
name back to toString.

51
00:03:47.119 --> 00:03:54.310
And I'll come back over here in
our tester, and get rid of this.

52
00:03:54.310 --> 00:03:57.510
Cuz notice,
I didn't actually call toString here.

53
00:03:57.510 --> 00:03:59.710
I just said, print out the object.

54
00:03:59.710 --> 00:04:01.598
And again,
if I show you what happens here.

55
00:04:05.247 --> 00:04:06.160
We don't need the.

56
00:04:06.160 --> 00:04:09.020
Okay, there we go.

57
00:04:09.020 --> 00:04:11.680
So, we're just gonna print out the object,
we're not going to say how or anything,

58
00:04:11.680 --> 00:04:16.460
but it just knows go look in my class and
if there's the two string method,

59
00:04:16.460 --> 00:04:19.410
that's how I'd specify how
I want to print it out.

60
00:04:19.410 --> 00:04:20.230
So again, we call it here.

61
00:04:34.309 --> 00:04:37.519
And even though I didn't call two string,
it knows, it says,

62
00:04:37.519 --> 00:04:40.671
you have a two string method,
I'll use yours and it prints out

63
00:04:40.671 --> 00:04:44.930
the five pieces of information the way i
specified I wanted the object printed out.

64
00:04:44.930 --> 00:04:47.200
I want to show you one more thing,

65
00:04:47.200 --> 00:04:52.550
I'm gonna come over here,
that name two string is very important.

66
00:04:52.550 --> 00:04:57.408
It has to be spelled exactly two
string with a capital S because

67
00:04:57.408 --> 00:05:01.800
I'm gonna show you,
if you change it to lowercase s, so

68
00:05:01.800 --> 00:05:06.391
it says two string,
then when I come over here and I run it.

69
00:05:13.927 --> 00:05:16.350
Let's see what happens.

70
00:05:16.350 --> 00:05:19.930
It goes back and prints the memory
address, because it says,

71
00:05:19.930 --> 00:05:23.920
if there's a two string in there, spelled
with a capital S, it's gonna use that.

72
00:05:23.920 --> 00:05:25.230
But that's the only thing it looks for,

73
00:05:25.230 --> 00:05:28.600
since I don't have it spelled correctly,
it doesn't find it.

74
00:05:28.600 --> 00:05:31.410
And so it says, I'll just print
out the memory address location.

75
00:05:32.770 --> 00:05:38.530
So just remember that all objects
have a default two string method and

76
00:05:38.530 --> 00:05:39.360
if you don't like it,

77
00:05:39.360 --> 00:05:42.500
it's just gonna print out the object
address, then you can write your own.

78
00:05:42.500 --> 00:05:43.930
And so, when it runs,

79
00:05:43.930 --> 00:05:47.840
it'll see if there is a two string
method in there, then it will call it.

80
00:05:47.840 --> 00:05:48.350
That's it.

81
00:05:48.350 --> 00:05:49.570
That's for two string, thanks.