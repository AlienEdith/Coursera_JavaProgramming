WEBVTT

1
00:00:03.460 --> 00:00:07.370
Now you've written a code to break
the vigenere if you know the key length.

2
00:00:07.370 --> 00:00:10.110
But what do you do if you
don't know the key length?

3
00:00:10.110 --> 00:00:13.040
Well, you could just try
some different key lengths.

4
00:00:13.040 --> 00:00:14.900
You could use the code you just wrote and

5
00:00:14.900 --> 00:00:17.770
pass it a key length,
then see what the result is.

6
00:00:17.770 --> 00:00:19.080
Maybe the key length is one.

7
00:00:21.470 --> 00:00:23.700
That output is incomprehensible.

8
00:00:23.700 --> 00:00:26.610
One is probably not
the correct key length.

9
00:00:26.610 --> 00:00:27.580
What if you tried two?

10
00:00:30.230 --> 00:00:32.520
That doesn't seem to be right either.

11
00:00:32.520 --> 00:00:33.320
How about three?

12
00:00:36.080 --> 00:00:37.160
Oh, hey.

13
00:00:37.160 --> 00:00:39.730
This output looks like
it could be English.

14
00:00:39.730 --> 00:00:41.750
It has readable words.

15
00:00:41.750 --> 00:00:45.850
It would seem this message was
encrypted with a key length of three.

16
00:00:45.850 --> 00:00:48.730
You could write a loop to try
many different keylengths.

17
00:00:48.730 --> 00:00:51.020
Start at one and count up from there.

18
00:00:51.020 --> 00:00:55.030
The computer can try one particular
key length in a fraction of a second.

19
00:00:55.030 --> 00:00:59.030
So, even if a message which is thousands
of lines long is encrypted with

20
00:00:59.030 --> 00:01:03.060
a keylength of 92,
the program can do it in no time but

21
00:01:03.060 --> 00:01:05.530
how do you tell if
the key length is right?

22
00:01:05.530 --> 00:01:09.660
Do you really want to look at
the output for each iteration to say?

23
00:01:09.660 --> 00:01:10.955
That's what we did a moment ago.

24
00:01:10.955 --> 00:01:13.650
Looked at the output to see
if it was meaningful text.

25
00:01:14.780 --> 00:01:18.090
But maybe if we think carefully
about what we just did,

26
00:01:18.090 --> 00:01:19.500
we can find a way to automate it.

27
00:01:20.600 --> 00:01:23.070
As you look at the incorrect
decryption here,

28
00:01:23.070 --> 00:01:26.030
think about how you knew it was not right.

29
00:01:26.030 --> 00:01:33.160
This group of three letters forms
a word but J-O-W is not a real word.

30
00:01:33.160 --> 00:01:38.600
Likewise y-t isn't a real word nor
is Y-O-B.

31
00:01:38.600 --> 00:01:42.700
None of the words in this message
are actual English words.

32
00:01:43.910 --> 00:01:47.385
Contrast that with the correct decryption.

33
00:01:47.385 --> 00:01:48.693
H-O-W is the word how.

34
00:01:48.693 --> 00:01:54.220
D-O is do and Y-O-U is you.

35
00:01:54.220 --> 00:01:57.910
All of the words in the correct
decryption are actual words.

36
00:01:57.910 --> 00:02:03.140
This observation leads to the idea of how
to figure out which key length is right.

37
00:02:03.140 --> 00:02:05.941
Count the number of real
words in the output.

38
00:02:05.941 --> 00:02:10.250
You would start by reading a list
of English words from a file.

39
00:02:10.250 --> 00:02:13.380
You could store the list of
words in an array list but

40
00:02:13.380 --> 00:02:16.600
we're going to recommend
you use a hash set,

41
00:02:16.600 --> 00:02:19.780
which will give you the same
functionality but work much faster.

42
00:02:20.980 --> 00:02:24.600
Then, you try the decryption for
various key lengths.

43
00:02:24.600 --> 00:02:26.890
Start at one and count up.

44
00:02:26.890 --> 00:02:28.240
Where do you end?

45
00:02:28.240 --> 00:02:30.780
Well you could just count
up to the message length.

46
00:02:30.780 --> 00:02:34.440
Although if the key is close to the length
of the message, you won't be able to break

47
00:02:34.440 --> 00:02:38.970
it because there won't be enough letters
to meaningfully frequency count.

48
00:02:38.970 --> 00:02:43.740
For this mini project,
just count up to 100 then for

49
00:02:43.740 --> 00:02:47.600
each key length you try,
see how many of the words

50
00:02:47.600 --> 00:02:50.950
in the decrypted text are actual
words from the file you read in.

51
00:02:52.020 --> 00:02:55.590
Once you have done that,
choose the key length, key, and

52
00:02:55.590 --> 00:02:59.980
decrypted text which give
you the most real words.

53
00:02:59.980 --> 00:03:04.430
As we just mentioned,
using an ArrayList would work just fine.

54
00:03:04.430 --> 00:03:06.120
As you read in the file,

55
00:03:06.120 --> 00:03:10.650
you would use the .add() method
to put each word in the list.

56
00:03:10.650 --> 00:03:15.150
When you want to see if a potential word
is actually a real word from the list,

57
00:03:15.150 --> 00:03:17.650
you would use the .contains() method.

58
00:03:17.650 --> 00:03:20.750
A better option is to
use the HashSet class.

59
00:03:20.750 --> 00:03:21.930
Like ArrayList and

60
00:03:21.930 --> 00:03:26.640
HashMap you can use a HashSet
containing different types of data.

61
00:03:26.640 --> 00:03:30.790
So, you need to put String in
angle brackets after HashSet.

62
00:03:30.790 --> 00:03:33.470
You want a HashSet of strings.

63
00:03:33.470 --> 00:03:36.900
For this problem you will use
the HashSet in much the same way

64
00:03:36.900 --> 00:03:38.380
as you would an ArrayList.

65
00:03:38.380 --> 00:03:41.482
You can call .add and .contains on it.

66
00:03:41.482 --> 00:03:45.240
You cannot index into a HashSet
like you can an ArrayList but

67
00:03:45.240 --> 00:03:49.640
if you wanted to iterate over one,
you could do that with a for each loop.

68
00:03:49.640 --> 00:03:52.460
That is what has been happening
behind the scenes when you

69
00:03:52.460 --> 00:03:56.120
iterate over a hash maps.key set.

70
00:03:56.120 --> 00:04:00.330
The main advantage is that dot
contains will be much faster.

71
00:04:00.330 --> 00:04:04.800
Instead of searching through every
word in the hash set, it can look

72
00:04:04.800 --> 00:04:10.070
at only a few words to figure out if it
contains the requested information or not.

73
00:04:10.070 --> 00:04:13.840
The last thing that we will mention
before you start coding is how to split

74
00:04:13.840 --> 00:04:16.370
a string up into individual words.

75
00:04:16.370 --> 00:04:20.000
You've already seen that
String has a .split() method.

76
00:04:20.000 --> 00:04:25.800
You can use that passing
in quote \\W quote.

77
00:04:25.800 --> 00:04:30.320
This asks the split method to divide
the string up at every character that is

78
00:04:30.320 --> 00:04:34.800
not part of a word meaning spaces,
punctuation or numbers.

79
00:04:34.800 --> 00:04:38.512
Once you have done that you can iterate
over those words with a for each loop,

80
00:04:38.512 --> 00:04:39.270
like this one.