WEBVTT

1
00:00:03.370 --> 00:00:04.280
Welcome back.

2
00:00:04.280 --> 00:00:06.920
Today you're going to learn
a little bit about security.

3
00:00:06.920 --> 00:00:09.880
Which will show the importance of
the problems you're going to solve in

4
00:00:09.880 --> 00:00:11.120
this module.

5
00:00:11.120 --> 00:00:13.270
Suppose you want to buy something online.

6
00:00:13.270 --> 00:00:16.170
You use your computer which
is connected to the internet.

7
00:00:16.170 --> 00:00:19.020
So it can communicate with
the servers at the online store

8
00:00:19.020 --> 00:00:21.050
from which you're making your purchases.

9
00:00:21.050 --> 00:00:22.250
To complete your purchase,

10
00:00:22.250 --> 00:00:26.200
you put your credit card or other
payment information into your computer.

11
00:00:26.200 --> 00:00:28.340
When you purchase the items
in your shopping cart, for

12
00:00:28.340 --> 00:00:30.970
example, your computer
sends that information

13
00:00:30.970 --> 00:00:35.400
with your credit card information across
the Internet to the online store.

14
00:00:35.400 --> 00:00:39.230
But what if a thief is looking at
the data going across the Internet?

15
00:00:39.230 --> 00:00:42.550
This thief might be able to intercept
your credit card information and

16
00:00:42.550 --> 00:00:44.600
use it to make fraudulent purchases.

17
00:00:44.600 --> 00:00:47.820
You certainly don't want that, and
neither does the online store.

18
00:00:47.820 --> 00:00:49.420
It wants your business.

19
00:00:49.420 --> 00:00:52.250
So, what makes online shopping safe?

20
00:00:52.250 --> 00:00:55.790
What actually happens is that your
computer encrypts the information before

21
00:00:55.790 --> 00:00:58.620
it sends it to the web servers for
the online store.

22
00:00:58.620 --> 00:01:04.030
The two computers agree on a special
piece of data called the key.

23
00:01:04.030 --> 00:01:09.620
And then use that with an encryption
algorithm to transform the data so

24
00:01:09.620 --> 00:01:13.110
that only another computer with
the key can decrypt the data.

25
00:01:13.110 --> 00:01:16.750
Now your computer sends the encrypted
data across the Internet and

26
00:01:16.750 --> 00:01:18.780
any potential thief is thwarted.

27
00:01:18.780 --> 00:01:21.310
The thief can only see
the encrypted data and

28
00:01:21.310 --> 00:01:23.840
cannot understand what the message says.

29
00:01:23.840 --> 00:01:25.090
Their receiving computer,

30
00:01:25.090 --> 00:01:30.270
which has the key, can then decrypt the
data and understand the original message.

31
00:01:30.270 --> 00:01:32.040
When you are doing anything online,

32
00:01:32.040 --> 00:01:35.600
your web browser will tell you
if you have a secure connection.

33
00:01:35.600 --> 00:01:40.930
For example,
Chrome displays the https in green and

34
00:01:40.930 --> 00:01:43.400
shows a green lock icon next to it.

35
00:01:43.400 --> 00:01:46.510
The s in https is for secure.

36
00:01:47.710 --> 00:01:51.420
It's a different kind of connection to
a web server than the standard HTTP.

37
00:01:52.730 --> 00:01:57.230
If you were to click on the lock icon,
it would tell you the technical details of

38
00:01:57.230 --> 00:01:59.880
the encryption used to
secure the connection.

39
00:01:59.880 --> 00:02:03.040
There are many algorithms involved in
securing your internet connection.

40
00:02:03.040 --> 00:02:07.805
And algorithm called AES is typically
used to encrypt the data that is sent to

41
00:02:07.805 --> 00:02:11.170
the server once the connection is set up.

42
00:02:11.170 --> 00:02:14.360
However, your computer and
the server must agree on the key

43
00:02:14.360 --> 00:02:17.750
in a secure fashion before
any information can be sent.

44
00:02:17.750 --> 00:02:19.810
While this may sound quite difficult,

45
00:02:19.810 --> 00:02:22.140
there are algorithms that
can make this happen.

46
00:02:22.140 --> 00:02:25.660
In this example my computer used
two algorithms to securely set up

47
00:02:25.660 --> 00:02:28.030
the connection with the server.

48
00:02:28.030 --> 00:02:32.210
One called elliptic curve diffie
hellman and one called RSA.

49
00:02:32.210 --> 00:02:37.050
These algorithms are very important to
the secure operation of the internet but

50
00:02:37.050 --> 00:02:39.980
the math involved is a bit
advanced to go into here.

51
00:02:39.980 --> 00:02:43.110
To implement these encryption algorithms,
you would need to spend several days or

52
00:02:43.110 --> 00:02:47.080
months just learning that math which
is not the focus of this course.

53
00:02:47.080 --> 00:02:49.550
If you're interested in
advanced cryptography,

54
00:02:49.550 --> 00:02:52.490
Coursera has some excellent
courses on the subject

55
00:02:52.490 --> 00:02:55.290
which you could take after you've
mastered basic programming.

56
00:02:56.620 --> 00:03:00.120
Even though modern cryptography
requires some advanced math,

57
00:03:00.120 --> 00:03:04.140
you can however learn a lot about
cryptography by looking to the past.

58
00:03:04.140 --> 00:03:08.560
Classical cryptography, the cryptographic
algorithms used in past centuries,

59
00:03:08.560 --> 00:03:12.020
involved simple mathematics and
even predate computers.

60
00:03:12.020 --> 00:03:13.980
These algorithms are not secured today.

61
00:03:13.980 --> 00:03:16.410
They can be easily cracked by computers.

62
00:03:16.410 --> 00:03:17.590
But learning how they work and

63
00:03:17.590 --> 00:03:20.460
implementing them will teach
you some important lessons.

64
00:03:20.460 --> 00:03:24.120
Furthermore, learning how to break
them will teach you a critical lesson.

65
00:03:24.120 --> 00:03:27.200
Do not try to make up your
own cryptographic scheme.

66
00:03:27.200 --> 00:03:28.690
If you need security,

67
00:03:28.690 --> 00:03:33.850
use a well-tested implementation
of a modern cryptographic library.

68
00:03:33.850 --> 00:03:37.190
So how far into history will we need
to look to find the first use of

69
00:03:37.190 --> 00:03:38.730
cryptography?

70
00:03:38.730 --> 00:03:41.830
The first known use of something
resembling cryptography

71
00:03:41.830 --> 00:03:45.030
comes from ancient Egypt 4,000 years ago.

72
00:03:45.030 --> 00:03:47.930
However, historians believe
that the hiding of messages was

73
00:03:47.930 --> 00:03:49.800
not a serious attempt to guard secrets.

74
00:03:51.530 --> 00:03:57.120
If you look forward a few hundred
years to Mesopotamia around 1500 BCE,

75
00:03:57.120 --> 00:04:01.420
you will find records of craftsmen
using simple encryption schemes to

76
00:04:01.420 --> 00:04:04.820
guard their secrets when they
recorded them on stone tablets.

77
00:04:04.820 --> 00:04:08.400
Going further forward to the Roman Empire,
the Caesar Cipher,

78
00:04:08.400 --> 00:04:12.430
which you will learn about in the rest of
this module is named after Julius Caesar,

79
00:04:12.430 --> 00:04:14.530
who used it extensively.

80
00:04:14.530 --> 00:04:19.182
Looking forward another 1500 years
you will find the Vigenere Cipher.

81
00:04:19.182 --> 00:04:24.224
Giovan Bastiste Belosa actually
described this algorithm in 1553,

82
00:04:24.224 --> 00:04:28.219
but it named after Blaise Vigenere
in the 19th century.

83
00:04:28.219 --> 00:04:30.660
His algorithm is
historically very important,

84
00:04:30.660 --> 00:04:33.290
as it was long regarded as unbreakable.

85
00:04:33.290 --> 00:04:37.520
However, In the mini project, you
are going to write a program to break it.

86
00:04:38.730 --> 00:04:41.040
Continuing forward to the 1940s,

87
00:04:41.040 --> 00:04:44.120
cryptography was a critical
part of World War II.

88
00:04:44.120 --> 00:04:48.550
The Allies devoted significant
resources to breaking the German codes,

89
00:04:48.550 --> 00:04:52.780
with a core of that effort taking
place at Bletchley Park in England.

90
00:04:52.780 --> 00:04:55.220
Alan Turing was a leader in
this code breaking effort and

91
00:04:55.220 --> 00:04:58.940
made many important contributions
to computer science.

92
00:04:58.940 --> 00:05:01.630
In fact, he's so
important that the highest

93
00:05:01.630 --> 00:05:03.780
honor in computer science is
called the Touring award.

94
00:05:03.780 --> 00:05:07.410
So now that you know a little
bit about cryptographic history,

95
00:05:07.410 --> 00:05:09.110
what will you be doing?

96
00:05:09.110 --> 00:05:12.360
In this module, you're going to
learn about the Caesar Cipher.

97
00:05:12.360 --> 00:05:14.040
You will implement it and then break it.

98
00:05:15.240 --> 00:05:18.180
In the mini project at the end of this
course, you're going to learn about

99
00:05:18.180 --> 00:05:21.830
the Vigenere Cipher and
will also implement it and break it.

100
00:05:21.830 --> 00:05:25.560
Of course, all of these problems are going
to teach you several important skills

101
00:05:25.560 --> 00:05:28.390
that can help you solve a wide
variety of other problems.